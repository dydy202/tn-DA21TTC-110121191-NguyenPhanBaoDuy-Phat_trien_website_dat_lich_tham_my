SESSION_SECRET=my-very-secure-secret-1234567890
PORT=3000
APP_URL=http://localhost:3000
EMAIL_USER=npb.duy.2002@gmail.com
EMAIL_PASS=fccgihkagjrlmvdx
DB_USER=sa
DB_PASSWORD=246810
DB_SERVER=DESKTOP-938DKPR
DB_DATABASE=spa

Account SID: AC9c31e236b8d524b99edb1ce16c55d932
AC82381f2b386dc245c4ffd285b9b8b5e0

Auth Token: 729e1a46ff07cbc7cd6cca87e7e3835c
b78b00ec77ed0967fb5cc788677fee79

const firebaseConfig = {
  apiKey: "AlzaSYc5fCjq7u3usCC_F43_KPrscg7tJ8zGw",
  authDomain: "spanailroom-f84b7.firebaseapp.com",
  projectId: "spanailroom-f84b7",
  storageBucket: "spanailroom-f84b7.appspot.com",
  messagingSenderId: "96590928961", // Dựa trên Project number
  appId: "1:965950928961:web:7842117bb33a5eb6d16ec0" // Cần lấy từ Firebase Console > Project Overview > Web app
};

<script type="text/javascript">
  window.CRISP_WEBSITE_ID = '1943f314-1b1a-49aa-9069-02eb9fe4db8a';
  (function(){
    var d = document;
    var s = d.createElement('script');
    s.src = 'https://client.crisp.chat/l.js';
    s.async = 1;
    d.getElementsByTagName('head')[0].appendChild(s);
  })();
</script>

// Cấu hình Twilio (không cần nhập Trial Number thủ công, Twilio tự quản lý)
const accountSid = "YOUR_TWILIO_ACCOUNT_SID"; // Thay bằng Account SID từ Twilio
const authToken = "YOUR_TWILIO_AUTH_TOKEN"; // Thay bằng Auth Token từ Twilio
const client = twilio(accountSid, authToken);

// Route đăng ký bằng SMS
app.get("/dangky-sms", (req, res) => {
    res.render("dangky-sms", { message: req.session.message || "" });
});

app.post("/dangky-sms", async (req, res) => {
    const { phoneNumber } = req.body;
    const otp = Math.floor(100000 + Math.random() * 900000).toString(); // Tạo mã OTP 6 chữ số

    try {
        // Lưu OTP vào session (hết hạn sau 5 phút)
        req.session.otp = otp;
        req.session.phoneNumber = phoneNumber;
        req.session.otpExpires = Date.now() + 5 * 60 * 1000;

        // Gửi SMS qua Twilio (sử dụng Trial Number mặc định)
        await client.messages.create({
            body: `Mã xác nhận của bạn là: ${otp}. Vui lòng nhập trong 5 phút.`,
            from: null, // Twilio tự động dùng Trial Number
            to: phoneNumber
        });

        req.session.message = "Mã OTP đã được gửi. Vui lòng kiểm tra tin nhắn!";
        res.redirect("/dangky-sms");
    } catch (error) {
        req.session.message = "Lỗi khi gửi OTP: " + error.message;
        res.redirect("/dangky-sms");
    }
});

app.post("/verify-otp", async (req, res) => {
    const { otp } = req.body;
    if (req.session.otp && req.session.otpExpires > Date.now() && req.session.otp === otp) {
        const phoneNumber = req.session.phoneNumber;
        const result = await query(
            "SELECT * FROM TaiKhoan WHERE TenTK = @phoneNumber",
            { phoneNumber }
        );

        let userId;
        if (result.recordset.length === 0) {
            const taiKhoanResult = await query(
                "INSERT INTO TaiKhoan (TenTK, MatKhau, MaQ) OUTPUT INSERTED.MaTK VALUES (@phoneNumber, @password, @maQ)",
                { phoneNumber, password: "default_password", maQ: 1 }
            );
            userId = taiKhoanResult.recordset[0].MaTK;

            await query(
                "INSERT INTO KhachHang (MaTK, SoDienThoaiKH, NgayTaoKH) VALUES (@maTK, @phoneNumber, @ngayTao)",
                { maTK: userId, phoneNumber, ngayTao: new Date() }
            );
        } else {
            userId = result.recordset[0].MaTK;
        }

        req.session.user = { id: userId, username: phoneNumber, roleId: 1 };
        req.session.message = "Đăng ký thành công!";
        delete req.session.otp;
        delete req.session.otpExpires;
        res.redirect("/admin");
    } else {
        req.session.message = "Mã OTP không hợp lệ hoặc đã hết hạn!";
        res.redirect("/dangky-sms");
    }
});